[{"/Users/kerlee.yap/tmp/recipe-book/src/steps.js":"1","/Users/kerlee.yap/tmp/recipe-book/src/recipe.js":"2","/Users/kerlee.yap/tmp/recipe-book/src/ingredients.js":"3","/Users/kerlee.yap/tmp/recipe-book/src/index.js":"4","/Users/kerlee.yap/tmp/recipe-book/src/reportWebVitals.js":"5","/Users/kerlee.yap/tmp/recipe-book/src/recipe-db.js":"6","/Users/kerlee.yap/tmp/recipe-book/src/focusable.js":"7","/Users/kerlee.yap/tmp/recipe-book/src/header.js":"8","/Users/kerlee.yap/tmp/recipe-book/src/App.js":"9"},{"size":821,"mtime":1611025438256,"results":"10","hashOfConfig":"11"},{"size":4964,"mtime":1616973131550,"results":"12","hashOfConfig":"11"},{"size":608,"mtime":1611025315298,"results":"13","hashOfConfig":"11"},{"size":503,"mtime":1616971750221,"results":"14","hashOfConfig":"11"},{"size":362,"mtime":1611012826418,"results":"15","hashOfConfig":"11"},{"size":8511,"mtime":1616973262699,"results":"16","hashOfConfig":"11"},{"size":181,"mtime":1611023306068,"results":"17","hashOfConfig":"11"},{"size":67,"mtime":1611025326215,"results":"18","hashOfConfig":"11"},{"size":223,"mtime":1616971863674,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s7or7d",{"filePath":"22","messages":"23","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kerlee.yap/tmp/recipe-book/src/steps.js",[],"/Users/kerlee.yap/tmp/recipe-book/src/recipe.js",["40","41"],"import React, { useEffect, useState, useRef } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport { Ingredients } from \"./ingredients\";\nimport { Steps } from \"./steps\";\n\nconst stayAwake = async () => {\n  let wakeLock = null;\n\n  const requestWakeLock = async () => {\n    try {\n      wakeLock = await navigator.wakeLock.request('screen');\n      console.log('Screen Wake Lock is active');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  await requestWakeLock();\n}\nconst Recipe = ({ recipe }) => {\n  const { ingredients, title, steps } = recipe;\n  const [message, setMessage] = useState(\"\");\n  const [currentStep, setStep] = useState(0);\n  const [focusedId, setFocusId] = useState();\n  const refEl = useRef(null);\n  useEffect(() =>\n    refEl && refEl.current ? refEl.current.scrollIntoView() : null\n  );\n  useEffect(() => stayAwake());\n\n  const SECTION = {\n    STEP: \"step\",\n    INGREDIENT: \"ingredient\",\n  };\n\n  const setFocus = (section, key) => {\n    setFocusId(`${section}-${key}`);\n  };\n\n  const goToStep = (stepNumber) => {\n    console.log('go to step:', `'${stepNumber}'`, Number(stepNumber));\n    setStep(Number(stepNumber));\n    setFocus(SECTION.STEP, stepNumber);\n  };\n\n  const goToIngredient = (ingredient) => {\n    setFocus(SECTION.INGREDIENT, ingredient)\n  }\n\n  const commands = [\n    {\n      command: \"Go to *\",\n      // command: [\"Step *\", \"Top *\", \"Stop *\"],\n      callback: goToStep,\n      // isFuzzyMatch: true,\n      // fuzzyMatchingThreshold: 0.2,\n      // bestMatchOnly: true,\n    },\n    {\n      command: \"Step *\",\n      // command: [\"Step *\", \"Top *\", \"Stop *\"],\n      callback: goToStep,\n      // isFuzzyMatch: true,\n      // fuzzyMatchingThreshold: 0.2,\n      // bestMatchOnly: true,\n    },\n    {\n      command: \"Stop *\",\n      callback: goToStep,\n    },\n    {\n      command: \"Top *\",\n      // command: [\"Step *\", \"Top *\", \"Stop *\"],\n      callback: goToStep,\n      // isFuzzyMatch: true,\n      // fuzzyMatchingThreshold: 0.2,\n      // bestMatchOnly: true,\n    },\n    {\n      command: \"How much *\",\n      callback: goToIngredient,\n    },\n    {\n      command: \"How many *\",\n      callback: goToIngredient,\n    },\n    {\n      command: [\"next\", \"okay\"],\n      callback: () => goToStep(currentStep + 1),\n      isFuzzyMatch: true,\n      fuzzyMatchingThreshold: 0.2,\n      bestMatchOnly: true,\n    },\n    {\n      command: [\"back\",],\n      callback: () => goToStep(currentStep - 1),\n      isFuzzyMatch: true,\n      fuzzyMatchingThreshold: 0.2,\n      bestMatchOnly: true,\n    },\n    // {\n    //   command: \"The weather is :condition today\",\n    //   callback: (condition) => setMessage(`Today, the weather is ${condition}`),\n    // },\n    // {\n    //   command: \"My top sports are * and *\",\n    //   callback: (sport1, sport2) => setMessage(`#1: ${sport1}, #2: ${sport2}`),\n    // },\n    // {\n    //   command: \"Pass the salt (please)\",\n    //   callback: () => setMessage(\"My pleasure\"),\n    // },\n    // {\n    //   command: [\"Hello\", \"Hi\"],\n    //   callback: ({ command }) => setMessage(`Hi there! You said: \"${command}\"`),\n    //   matchInterim: true,\n    // },\n    // {\n    //   command: \"Beijing\",\n    //   callback: (command, spokenPhrase, similarityRatio) =>\n    //     setMessage(\n    //       `${command} and ${spokenPhrase} are ${similarityRatio * 100}% similar`\n    //     ),\n    //   // If the spokenPhrase is \"Benji\", the message would be \"Beijing and Benji are 40% similar\"\n    //   isFuzzyMatch: true,\n    //   fuzzyMatchingThreshold: 0.2,\n    // },\n    // {\n    //   command: [\"eat\", \"sleep\", \"leave\"],\n    //   callback: (command) => setMessage(`Best matching command: ${command}`),\n    //   isFuzzyMatch: true,\n    //   fuzzyMatchingThreshold: 0.2,\n    //   bestMatchOnly: true,\n    // },\n    {\n      command: \"clear\",\n      callback: ({ resetTranscript }) => resetTranscript(),\n    },\n  ];\n\n  const { transcript } = useSpeechRecognition({ commands });\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return <p>Your browser doesn't support this</p>;\n  }\n\n\n\n  return (<>\n    <div class=\"two-col\">\n      <div class=\"side\">\n        <h2>{title}</h2>\n        <Ingredients\n          refEl={refEl}\n          focusedId={focusedId}\n          ingredients={ingredients}\n        />\n        <Steps\n          refEl={refEl}\n          focusedId={focusedId}\n          steps={steps}\n        />\n      </div>\n      <div class=\"side\">\n        <button\n          onClick={() => SpeechRecognition.startListening({ continuous: true })}\n        >\n          Start\n        </button>\n        <button onClick={SpeechRecognition.stopListening}>Stop</button>\n        <button onClick={() => goToStep(currentStep + 1)}>Step</button>\n        <button onClick={() => goToIngredient('eggs')}>Ingredient</button>\n        <p>Current step: {currentStep}</p>\n        <p>{message}</p>\n        <p>TRANSCRIPT: {transcript}</p>\n      </div>\n    </div>\n    </>\n  );\n};\nexport default Recipe;\n","/Users/kerlee.yap/tmp/recipe-book/src/ingredients.js",[],"/Users/kerlee.yap/tmp/recipe-book/src/index.js",["42"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n","/Users/kerlee.yap/tmp/recipe-book/src/reportWebVitals.js",[],"/Users/kerlee.yap/tmp/recipe-book/src/recipe-db.js",[],"/Users/kerlee.yap/tmp/recipe-book/src/focusable.js",[],"/Users/kerlee.yap/tmp/recipe-book/src/header.js",[],"/Users/kerlee.yap/tmp/recipe-book/src/App.js",[],{"ruleId":"43","severity":1,"message":"44","line":13,"column":7,"nodeType":"45","messageId":"46","endLine":13,"endColumn":15},{"ruleId":"43","severity":1,"message":"47","line":24,"column":19,"nodeType":"45","messageId":"46","endLine":24,"endColumn":29},{"ruleId":"43","severity":1,"message":"48","line":5,"column":8,"nodeType":"45","messageId":"46","endLine":5,"endColumn":23},"no-unused-vars","'wakeLock' is assigned a value but never used.","Identifier","unusedVar","'setMessage' is assigned a value but never used.","'reportWebVitals' is defined but never used."]
[{"/Users/kerlee.yap/tmp/recipe-book/src/steps.js":"1","/Users/kerlee.yap/tmp/recipe-book/src/recipe.js":"2","/Users/kerlee.yap/tmp/recipe-book/src/ingredients.js":"3","/Users/kerlee.yap/tmp/recipe-book/src/index.js":"4","/Users/kerlee.yap/tmp/recipe-book/src/reportWebVitals.js":"5","/Users/kerlee.yap/tmp/recipe-book/src/recipe-db.js":"6","/Users/kerlee.yap/tmp/recipe-book/src/focusable.js":"7","/Users/kerlee.yap/tmp/recipe-book/src/header.js":"8","/Users/kerlee.yap/tmp/recipe-book/src/App.js":"9"},{"size":852,"mtime":1640671019916,"results":"10","hashOfConfig":"11"},{"size":5146,"mtime":1616974183430,"results":"12","hashOfConfig":"13"},{"size":608,"mtime":1611025315298,"results":"14","hashOfConfig":"13"},{"size":500,"mtime":1640670874027,"results":"15","hashOfConfig":"11"},{"size":362,"mtime":1611012826418,"results":"16","hashOfConfig":"11"},{"size":8593,"mtime":1640670882722,"results":"17","hashOfConfig":"11"},{"size":181,"mtime":1611023306068,"results":"18","hashOfConfig":"11"},{"size":67,"mtime":1611025326215,"results":"19","hashOfConfig":"13"},{"size":223,"mtime":1616971863674,"results":"20","hashOfConfig":"13"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yhk085",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"s7or7d",{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":8,"warningCount":0,"fixableErrorCount":8,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":9,"warningCount":0,"fixableErrorCount":4,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/kerlee.yap/tmp/recipe-book/src/steps.js",[],"/Users/kerlee.yap/tmp/recipe-book/src/recipe.js",["40"],"import React, { useEffect, useState, useRef } from \"react\";\nimport SpeechRecognition, {\n  useSpeechRecognition,\n} from \"react-speech-recognition\";\nimport { Ingredients } from \"./ingredients\";\nimport { Steps } from \"./steps\";\n\nlet wakeLock = null;\n\nconst stayAwake = async () => {\n\n  const requestWakeLock = async () => {\n    try {\n      wakeLock = await navigator.wakeLock.request('screen');\n      console.log('Screen Wake Lock is active');\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  await requestWakeLock();\n}\n\nconst startListening = () => {\n  stayAwake();\n  SpeechRecognition.startListening({ continuous: true });\n}\n\nconst stopListening = async () => {\n  wakeLock.release()\n  .then(() => {\n    wakeLock = null;\n  });\n  SpeechRecognition.stopListening();\n}\nconst Recipe = ({ recipe }) => {\n  const { ingredients, title, steps } = recipe;\n  const [message, setMessage] = useState(\"\");\n  const [currentStep, setStep] = useState(0);\n  const [focusedId, setFocusId] = useState();\n  const refEl = useRef(null);\n  useEffect(() =>\n    refEl && refEl.current ? refEl.current.scrollIntoView() : null\n  );\n  useEffect(() => stayAwake());\n\n  const SECTION = {\n    STEP: \"step\",\n    INGREDIENT: \"ingredient\",\n  };\n\n  const setFocus = (section, key) => {\n    setFocusId(`${section}-${key}`);\n  };\n\n  const goToStep = (stepNumber) => {\n    console.log('go to step:', `'${stepNumber}'`, Number(stepNumber));\n    setStep(Number(stepNumber));\n    setFocus(SECTION.STEP, stepNumber);\n  };\n\n  const goToIngredient = (ingredient) => {\n    setFocus(SECTION.INGREDIENT, ingredient)\n  }\n\n  const commands = [\n    {\n      command: \"Go to *\",\n      // command: [\"Step *\", \"Top *\", \"Stop *\"],\n      callback: goToStep,\n      // isFuzzyMatch: true,\n      // fuzzyMatchingThreshold: 0.2,\n      // bestMatchOnly: true,\n    },\n    {\n      command: \"Step *\",\n      // command: [\"Step *\", \"Top *\", \"Stop *\"],\n      callback: goToStep,\n      // isFuzzyMatch: true,\n      // fuzzyMatchingThreshold: 0.2,\n      // bestMatchOnly: true,\n    },\n    {\n      command: \"Stop *\",\n      callback: goToStep,\n    },\n    {\n      command: \"Top *\",\n      // command: [\"Step *\", \"Top *\", \"Stop *\"],\n      callback: goToStep,\n      // isFuzzyMatch: true,\n      // fuzzyMatchingThreshold: 0.2,\n      // bestMatchOnly: true,\n    },\n    {\n      command: \"How much *\",\n      callback: goToIngredient,\n    },\n    {\n      command: \"How many *\",\n      callback: goToIngredient,\n    },\n    {\n      command: [\"next\", \"okay\"],\n      callback: () => goToStep(currentStep + 1),\n      isFuzzyMatch: true,\n      fuzzyMatchingThreshold: 0.2,\n      bestMatchOnly: true,\n    },\n    {\n      command: [\"back\",],\n      callback: () => goToStep(currentStep - 1),\n      isFuzzyMatch: true,\n      fuzzyMatchingThreshold: 0.2,\n      bestMatchOnly: true,\n    },\n    // {\n    //   command: \"The weather is :condition today\",\n    //   callback: (condition) => setMessage(`Today, the weather is ${condition}`),\n    // },\n    // {\n    //   command: \"My top sports are * and *\",\n    //   callback: (sport1, sport2) => setMessage(`#1: ${sport1}, #2: ${sport2}`),\n    // },\n    // {\n    //   command: \"Pass the salt (please)\",\n    //   callback: () => setMessage(\"My pleasure\"),\n    // },\n    // {\n    //   command: [\"Hello\", \"Hi\"],\n    //   callback: ({ command }) => setMessage(`Hi there! You said: \"${command}\"`),\n    //   matchInterim: true,\n    // },\n    // {\n    //   command: \"Beijing\",\n    //   callback: (command, spokenPhrase, similarityRatio) =>\n    //     setMessage(\n    //       `${command} and ${spokenPhrase} are ${similarityRatio * 100}% similar`\n    //     ),\n    //   // If the spokenPhrase is \"Benji\", the message would be \"Beijing and Benji are 40% similar\"\n    //   isFuzzyMatch: true,\n    //   fuzzyMatchingThreshold: 0.2,\n    // },\n    // {\n    //   command: [\"eat\", \"sleep\", \"leave\"],\n    //   callback: (command) => setMessage(`Best matching command: ${command}`),\n    //   isFuzzyMatch: true,\n    //   fuzzyMatchingThreshold: 0.2,\n    //   bestMatchOnly: true,\n    // },\n    {\n      command: \"clear\",\n      callback: ({ resetTranscript }) => resetTranscript(),\n    },\n  ];\n\n  const { transcript } = useSpeechRecognition({ commands });\n\n  if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n    return <p>Your browser doesn't support this</p>;\n  }\n\n\n\n  return (<>\n    <div class=\"two-col\">\n      <div class=\"side\">\n        <h2>{title}</h2>\n        <Ingredients\n          refEl={refEl}\n          focusedId={focusedId}\n          ingredients={ingredients}\n        />\n        <Steps\n          refEl={refEl}\n          focusedId={focusedId}\n          steps={steps}\n        />\n      </div>\n      <div class=\"side\">\n        <button\n          onClick={startListening}\n        >\n          Start\n        </button>\n        <button onClick={stopListening}>Stop</button>\n        <button onClick={() => goToStep(currentStep + 1)}>Step</button>\n        <button onClick={() => goToIngredient('eggs')}>Ingredient</button>\n        <p>Current step: {currentStep}</p>\n        <p>{message}</p>\n        <p>TRANSCRIPT: {transcript}</p>\n      </div>\n    </div>\n    </>\n  );\n};\nexport default Recipe;\n","/Users/kerlee.yap/tmp/recipe-book/src/ingredients.js",[],"/Users/kerlee.yap/tmp/recipe-book/src/index.js",[],"/Users/kerlee.yap/tmp/recipe-book/src/reportWebVitals.js",["41","42","43","44","45","46","47","48"],"/Users/kerlee.yap/tmp/recipe-book/src/recipe-db.js",[],"/Users/kerlee.yap/tmp/recipe-book/src/focusable.js",["49","50","51","52","53","54","55","56","57"],"/Users/kerlee.yap/tmp/recipe-book/src/header.js",[],"/Users/kerlee.yap/tmp/recipe-book/src/App.js",[],{"ruleId":"58","severity":1,"message":"59","line":38,"column":19,"nodeType":"60","messageId":"61","endLine":38,"endColumn":29},{"ruleId":"62","severity":2,"message":"63","line":4,"column":26,"nodeType":"64","messageId":"65","endLine":4,"endColumn":27,"fix":"66"},{"ruleId":"62","severity":2,"message":"63","line":5,"column":26,"nodeType":"64","messageId":"65","endLine":5,"endColumn":27,"fix":"67"},{"ruleId":"62","severity":2,"message":"63","line":6,"column":26,"nodeType":"64","messageId":"65","endLine":6,"endColumn":27,"fix":"68"},{"ruleId":"62","severity":2,"message":"63","line":7,"column":26,"nodeType":"64","messageId":"65","endLine":7,"endColumn":27,"fix":"69"},{"ruleId":"62","severity":2,"message":"63","line":8,"column":27,"nodeType":"64","messageId":"65","endLine":8,"endColumn":28,"fix":"70"},{"ruleId":"62","severity":2,"message":"63","line":9,"column":7,"nodeType":"64","messageId":"65","endLine":9,"endColumn":8,"fix":"71"},{"ruleId":"62","severity":2,"message":"63","line":11,"column":2,"nodeType":"72","messageId":"65","endLine":11,"endColumn":3,"fix":"73"},{"ruleId":"62","severity":2,"message":"63","line":13,"column":31,"nodeType":"74","messageId":"65","endLine":13,"endColumn":32,"fix":"75"},{"ruleId":"76","severity":2,"message":"77","line":1,"column":29,"nodeType":"78","messageId":"79","endLine":1,"endColumn":38},{"ruleId":"76","severity":2,"message":"80","line":1,"column":40,"nodeType":"78","messageId":"79","endLine":1,"endColumn":45},{"ruleId":"76","severity":2,"message":"81","line":1,"column":47,"nodeType":"78","messageId":"79","endLine":1,"endColumn":55},{"ruleId":"82","severity":2,"message":"83","line":2,"column":3,"nodeType":"60","messageId":"84","endLine":2,"endColumn":12,"fix":"85"},{"ruleId":"82","severity":2,"message":"86","line":2,"column":15,"nodeType":"87","messageId":"88","endLine":6,"endColumn":4,"fix":"89"},{"ruleId":"90","severity":2,"message":"91","line":3,"column":5,"nodeType":"92","messageId":"93","endLine":3,"endColumn":37},{"ruleId":"94","severity":2,"message":"95","line":3,"column":14,"nodeType":"96","messageId":"97","endLine":3,"endColumn":23,"fix":"98"},{"ruleId":"90","severity":2,"message":"91","line":7,"column":5,"nodeType":"92","messageId":"93","endLine":7,"endColumn":10},{"ruleId":"62","severity":2,"message":"63","line":8,"column":4,"nodeType":"72","messageId":"65","endLine":8,"endColumn":5,"fix":"99"},"no-unused-vars","'setMessage' is assigned a value but never used.","Identifier","unusedVar","semi","Extra semicolon.","ExpressionStatement","extraSemi",{"range":"100","text":"101"},{"range":"102","text":"103"},{"range":"104","text":"105"},{"range":"106","text":"107"},{"range":"108","text":"109"},{"range":"110","text":"111"},"VariableDeclaration",{"range":"112","text":"113"},"ExportDefaultDeclaration",{"range":"114","text":"115"},"react/prop-types","'isFocused' is missing in props validation","Property","missingPropType","'refEl' is missing in props validation","'children' is missing in props validation","multiline-ternary","Expected newline between test and consequent of ternary expression.","expectedTestCons",{"range":"116","text":"117"},"Expected newline between consequent and alternate of ternary expression.","JSXElement","expectedConsAlt",{"range":"118","text":"117"},"react/react-in-jsx-scope","'React' must be in scope when using JSX","JSXOpeningElement","notInScope","quotes","Strings must use singlequote.","Literal","wrongQuotes",{"range":"119","text":"120"},{"range":"121","text":"122"},[202,217],")\n      getFID",[229,244],")\n      getFCP",[256,271],")\n      getLCP",[283,299],")\n      getTTFB",[311,319],")\n    }",[319,325],")\n  }",[326,336],"}\n\nexport",[345,361],"reportWebVitals",[72,73],"\n",[145,146],[90,99],"'focused'",[178,180],")"]